Archiver (3)

Как видишь, архивировать оказалось не так уж и сложно. Но наш архиватор получился каким-то уж

слишком примитивным. Настоящий архиватор должен уметь гораздо больше: распаковку архива,

добавление нового файла в существующий архив, удаление файла из архива, просмотр содержимого

архива. Сейчас мы будем улучшать наш архиватор. А для этого придется написать несколько новых

классов. Сначала давай создадим enum Operation, который будет содержать все команды, которые

поддерживает наш архиватор.

Так же было бы удобно использовать ConsoleHelper для работы с консолью, чтобы все что касается

консоли было собрано в одном классе. В дальнейшем, если не указано обратного, то весь ввод и вывод должен происходить через ConsoleHelper.



1. Объяви enum Operation, в него добавить команды:

1.1. Создать архив CREATE

1.2. Добавить файл в архив ADD

1.3. Удалить файл из архива REMOVE

1.4. Извлечь содержимое архива EXTRACT

1.5. Просмотреть содержимое архива CONTENT

1.6. Выйти из программы EXIT

2. Создай класс ConsoleHelper и реализуй в нем статические публичные методы:

2.1. Вывести сообщение в консоль void writeMessage(String message)

2.2. Прочитать строку с консоли String readString()

2.3. Прочитать число с консоли int readInt()

Методы чтения с консоли могут бросать исключение IOException в случае ошибки ввода, учти

это при их объявлении.





Требования:

1. Создай enum Operation. Он должен содержать следующие значения: CREATE, ADD, REMOVE, EXTRACT, CONTENT, EXIT.

2. Создай класс ConsoleHelper.

3. В классе ConsoleHelper нужно реализовать статический метод void writeMessage(String message), который будет выводить message в консоль.

4. В классе ConsoleHelper нужно реализовать статический метод String readString(), который будет считывать с консоли строку.

5. В классе ConsoleHelper нужно реализовать статический метод int readInt(), который будет считывать с консоли число.

Archiver (1)

Давай напишем архиватор. Архиватор, как минимум, должен уметь архивировать и разархивировать

файлы.



Начнем с первого.

Нам потребуется менеджер архива. Он будет совершать операции над файлом архива (файлом, который будет храниться на диске и иметь расширение zip). Класс, который будет этим заниматься, назовем ZipFileManager. А главный класс приложения “Архиватор” будет называться Archiver.

В программировании и не только, есть понятие полного (абсолютного) и относительного пути. Для начала, разберемся что-же такое путь вообще. Путь (англ. Path) – это набор символов, который показывает, где в операционной системе находится какой-то файл или папка.

Полный или абсолютный путь – это путь, начинающийся с корневой директории. В операционной системе Windows, корневой директорией принято считать диск.

Пример полного пути в Windows: C:userzipsTest1.zip.

Относительный путь – это путь относительно какой-то директории. zipsTest1.zip — это пример

относительного пути файла Test1.zip относительно директории (папки) C:user. Относительный путь,

относительно директории C:userzips будет просто Test1.zip и совпадать с именем файла.

Обрати внимание, что по умолчанию, и полный, и относительный путь к файлу, включают в себя имя

файла.

1. Создай класс менеджер ZipFileManager

2. Добавь в класс приватную переменную Path zipFile. В ней мы будем хранить полный путь к архиву, с которым будем работать.

3. Добавь конструктор ZipFileManager(Path zipFile). Проинициализируй поле класса zipFile.

4. Объяви публичный метод createZip(Path source) throws Exception, пока с пустой реализацией.

Path source – это путь к чему-то, что мы будем архивировать.

5. Создай класс Archiver и добавь в него метод main.

6. В методе main:

6.1 Запроси пользователя ввести полный путь архива с клавиатуры. Не забудь, что имя тоже входит в состав полного пути.

6.2 Создай объект класса ZipFileManager, передав в него имя файла архива. Разберись, как из String получить Path.



Подсказка: изучи метод get() класса Paths.



6.3 Запроси пользователя ввести путь к файлу, который будем архивировать. Не путай это с файлом архива, который мы уже ввели. На этот раз нам нужен файл, который мы будем сжимать, а не в котором хранить сжатые данные.

6.4 Вызови метод createZip у объекта ZipFileManager, передав в него путь для архивации.





Требования:

1. Создай класс ZipFileManager.

2. Внутри класса ZipFileManager должно быть создано приватное поле Path zipFile.

3. Внутри класса ZipFileManager должен быть создан конструктор, который будет инициализировать поле zipFile.

4. Внутри класса ZipFileManager должен быть создан публичный метод void createZip(Path source) throws Exception.

5. Создай класс Archiver и добавь в него метод main. Реализуй его согласно заданию.
